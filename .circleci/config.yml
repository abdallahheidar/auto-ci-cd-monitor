version: 2.1

orbs: 
    slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.Workflow_ID>>
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.Workflow_ID>>)
            echo "SUCCESS: $SUCCESS"
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              export RVRT_MIG_DBG=$(ls ~/.npm/_logs/ | grep AddEmployee.ts)
              if $RVRT_MIG_DBG | grep AddEmployee.ts
              then
                cat ~/.npm/_logs/$RVRT_MIG_DBG
              fi
            fi
  
  install_nodejs:
    description: Install Node.js
    steps:
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

  notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: $SLACK_DEFAULT_CHANNEL
            template: basic_fail_1

jobs:
  build-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1
      - run:
          name: Install tar - gzip utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt         
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["34:f7:a8:2d:69:01:4c:f4:8a:df:f6:80:2e:c0:07:65"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
            # exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            # exit 1
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to Kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
            exit 1
      # - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            # exit 1
      - run:
          name: Get backend url
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > frontend/.env
            cat frontend/.env
            export API_URL="http://$BACKEND_PUBLIC_IP:3030"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build:prod
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations                    
  
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["34:f7:a8:2d:69:01:4c:f4:8a:df:f6:80:2e:c0:07:65"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm i
            npm run build
            cd dist
            echo NODE_ENV=production > .env
            echo VERSION=1 >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./migrations >> .env
            echo 'TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}' >> .env
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat .env
            cd ..
            tar -cvf artifact.tar.gz dist/.env dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            URL="http://${BACKEND_PUBLIC_IP}:3030/api/status"
            if curl -s --head ${URL} | grep "OK"
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - notify_on_failure
      - revert-migrations
      # - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID"
            echo $OLD_WORKFLOW_ID >> ~/OLD_WORKFLOW_ID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
            echo OLD_WORKFLOW_ID is : ${OLD_WORKFLOW_ID}
            echo CURRENT_WORKFLOW_ID is : ${CIRCLE_WORKFLOW_ID:0:7}
      # - destroy-environment
      # - revert-migrations

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              echo OLD_WORKFLOW_ID is : ${OLD_WORKFLOW_ID}                

              export STACKS=[]
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"          
              
              if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID: -7}" ]]
              then
                echo "---------- Clean-up confirmed ----------"
                aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID: -7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID: -7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID: -7}"
              else
                echo "---------- Nothing to Clean-up ----------"
              fi

workflows:
  default:
    jobs:
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: [master]
      # - build-backend:
      #     filters:
      #       branches:
      #         only: [master]
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations:
          # requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
          # requires: [smoke-test]
      # - cleanup:
          # requires: [cloudfront-update]
